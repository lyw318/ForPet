
1. 어플리케이션 제작시 배포를 함. 서버는 WAS 에 함, 배포를 할때 WAS 에 다운로드, WAS 설치, 포트 설정, 설치경로, JDK 경로 설정 -> 이클립스
   WAS 에 배포를 할때 EXPORT WAR 파일로 변경후 어느폴더(webapp 에 올림) 서버 실행
   프로젝트명으로 접속가능/ 브라우저로 접속확인.

2. GIT 통해서 형상관리. git 절차, 회원가입, 이메일, 원격저장소(리모트 레파지토리)생성, 직접생성 프로젝트 올리거나, fork 해서 계정으로 가져와서 작업
깃적용, branch 를 생성해서 merge 하거나 commit push 함 master 에서 모든 branch merge 함

3. was 서버에 war 파일로 올림

4. git 에서 쓰지 않는 용어

---git 용어
1. repository

로컬 저장소는 아래 3가지로 이루어짐

- working directory : 실제소스코드

- Index : stage 역할을함

- head : commit 을 한 소스코드
2. clone

git clone : 로컬 / 원격 repository 를 복사한다.
3. commit

git add <파일이름>

git commit : 변경 내용이 head 에 반영됨

로컬 저장소에는 변경이 반영되었지만 원격 저장소에는 아직 반영되지 않음
4. checkout

브랜치를 변경 
git checkout -b feature_x

git checkout master //master 로 돌아옴
푸쉬하고 난 다음에 문제가 발견되었을 시 이전버전으로 돌아갈 수도 있다.

git checkout -- <파일이름>//이전버전으로

git checkout <hash> //git log OR git hist 를 사용하여 이전버전의 hash 를 알아내어 roll back
5. Branch

master  와 격리된 상태에서 무언가를 개발할때 사용

개발을 완료한 후 master 에 merge 를 함
6.Blame

코드의 한줄한줄 누가 마지막으로 commit 한 지 정보가 필요할때
7. Diff

git diff <original branch> <diff branch>

merge 하기 전 어떤 내용이 변경되었는지 알아볼 수 있다.
8. Log

소스코드 버전의 id 를 알수있다

git log

9. Merge

git merge <branch name>

브랜치의 변경사항을 master 에 반영. 혹은 다른 두 가지를 merge

10.Pull

fetch + merge

원격저장소의 변경 내용이 로컬 저장소에 반영됨



11. Push

로컬저장소의 Head 에 머물고있는 변경내용을 원격으로 올림

git push <branch 이름>



12. Fetch

master 나 다른 branch 에서 작업한 내용이 내 로컬 repository 와 버전이 맞지 않을때 최신버전으로 업데이트



13. Rebase

Rebase 는 두 브랜치가 나뉘기 전인 공통 커밋으로 이동하고 나서 그 커밋부터 지금 Checkout한 브랜치가 가리키는 커밋까지 diff를 차례로 만들어 어딘가에 임시로 저장해 놓는다. 그 후 master 에 저장해 놓았던 변경사항을 차례대로 적용한다

Merge이든 Rebase든 둘 다 합치는 관점에서는 서로 다를 게 없다. 하지만, Rebase가 좀 더 깨끗한 히스토리를 만든다. 



 Rebase의 경우는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합치고 Merge의 경우는 두 브랜치의 최종결과만을 가지고 합친다.


5. 웹어플리케이션을 올리는 순서, 프로젝트선택-익스포트-웹프로젝트선택-war 파일로 폴더선택-톰캣버전 선택-파일 wepapp 라는 경로

6. 리눅스에서 톰켓서버를 제어하기위한, 이상(thead 용어인것?)

아래는 주요 설정이 포함된 $TOMCAT_HOME/conf/server.xml 의 Connector 설정이다.

 connectionTimeout (Default : 5000)

 클라이언트와 서버간 I/O가 설정한 시간동안 발생하지 않을 경우 타임아웃을 발생시킨다.

 minSpareThreads

 Tomcat 실행시 생성되는 초기 쓰레드 사이즈.

 maxThreads (Default : 150)

 서버가 허용할수 있는 최대 요청(쓰레드) 수. 실제 Active User 수를 의미함.

 acceptCount

 쓰레드가 full 상태일 경우 요청을 대기하는 queue의 사이즈.

 maxConnection

 최대 커넥션 수.

 maxKeepAlive (Default : 1 = 비활성화)

 종료되지 않고 동시에 대기할 수 있는 TCP 연결 수.


7. 배포관련된것


웹어플리케이션 배포환경 
서버는 와스에 배포됨, 실질적으로 서버용컴퓨터가 있는게 아니라서 이클립스 연결 배포
WAS 다운로드, WAS 설치, 충돌안나게 설정, 톰캣에 설치경로, jdk 설치경로 잡음, was 실행
was에 만든 애플리케이션 배포하려면 export 해서 war파일 만든 후 webapp 폴더에 war파일 올림. 서버 다시 올리면 톰캣이 알아서 찾은다음 압축풀고 서비스,

git을 통해 형상관리 가능, 절차 : git 회원가입 - 이메일 등록 - 원격 저장소 remote repository - fork 내 원격레파지토리 원하는 파일 들어옴, 브런치 브런치에 해당하는 싱크로나이즈 머지 브런치에 포크한게 들어옴. 브런치에서 새로 작성, 커밋, 마스터브런치 자동으로 생성되니까 풀 리퀘스트 확인해서 머지함 마스터랑 생성된 브런치 합친게 됨.

와스서버에 우리가 만든 프로젝트 올릴때 war, 어플리케이션 형상관리 깃에서 쓰지않는 용어
웹프로젝트를 톰캣서버에 올리는것 배포파일 만들기
프로젝트 선택- export- web project 선택 - war파일로 폴더 선택하고 export, 톰캣에 버전 
파일 webapp
리눅스에서 톰캣서버를 제어하기 위한 
스레드했을 때 나옴
배포할 때 어디다 배포하는가
